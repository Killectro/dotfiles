#!/bin/bash

set -euo pipefail

if [[ -n "${GIT_PILE_VERBOSE:-}" ]]; then
  set -x
fi

readonly commit_arg="${1:-HEAD}"
if [[ $# -gt 0 ]]; then
  shift
fi

readonly commit="$(git rev-parse "$commit_arg")"
readonly branch_name="${GIT_PILE_PREFIX:-}$(git show --no-patch --format=%f "$commit" | tr '[:upper:]' '[:lower:]')"

if git show-ref --verify --quiet refs/heads/"$branch_name"; then
  echo "error: branch named '$branch_name' already exists" >&2
  exit 1
fi

branch_with_remote=$(git rev-parse --abbrev-ref --symbolic-full-name "@{upstream}")
remote_branch_name="${branch_with_remote#*/}"

git branch --no-track "$branch_name" "@{upstream}"

readonly worktree_name=$(git rev-parse --show-toplevel | md5)
readonly worktree_dir="$HOME/.cache/git-pile/$worktree_name"
if [[ ! -d "$worktree_dir" ]]; then
  git worktree add -f "$worktree_dir" "$branch_name"
else
  if ! git -C "$worktree_dir" switch "$branch_name"; then
    git branch -D "$branch_name"
    exit 1
  fi
fi

_detach_branch() {
  git -C "$worktree_dir" switch --detach --quiet
}

trap _detach_branch EXIT

if ! git -C "$worktree_dir" cherry-pick "$commit"; then
  if git -C "$worktree_dir" mergetool; then
    # TODO: if you mess up the cherry pick and leave with no changes this doesn't handle that, in that case we need skip or abort
    git -C "$worktree_dir" -c core.editor=true cherry-pick --continue
  else
    git -C "$worktree_dir" cherry-pick --abort
    _detach_branch
    git branch -D "$branch_name"
    exit 1
  fi
fi

if git -C "$worktree_dir" push --quiet --set-upstream origin "$branch_name"; then
  # TODO maybe ghb should support -C ?
  pushd "$worktree_dir" >/dev/null
  ghb pr --no-edit --draft "$remote_branch_name" "$@"
  popd
elif git -C "$worktree_dir" push --quiet --set-upstream mine "$branch_name"; then
  git -C "$worktree_dir" open --remote mine "pull/new/$branch_name"
else
  echo "error: failed to create remote branch" >&2
  _detach_branch
  git branch -D "$branch_name"
fi
